// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // ALU
      ALU(x=DregOut,y=AorInM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8]
      ,f=instruction[7],no=instruction[6],out=AluOut,out=outM,zr=isZeroOut,ng=isNegOut);
      //register D
      DRegister(in=AluOut,load=loadingD,out=DregOut);
      And(a=instruction[15],b=true,out=isCins);
      And(a=instruction[4],b=isCins,out=loadingD);
      //register A
      Not(in=instruction[15], out=isAInstruction);
      ARegister(in=outOfMux,load=loadingA,out=AregOut,out[0..14]=addressM);
      And(a=instruction[5],b=isCins,out=is);
      Or(a=is,b=isAInstruction,out=loadingA);
      //MUx feeding A

      Mux16(a=instruction,b=AluOut,sel=isCins,out=outOfMux);
      //Mux feeding Alu
      Mux16(a=AregOut,b=inM,sel=selectAorM,out=AorInM);
      And(a=instruction[12],b=isCins,out=selectAorM);
      //assert WriteM
      And(a=instruction[3],b=isCins,out=writeM);
      //program counter
      PC(in=AregOut,load=loadPC,inc=PCinc,reset=reset,out[0..14]=pc);

      // Set out flags and ProgramCounter
       Not(in=isNegOut, out=isNonNeg);
       Not(in=isZeroOut, out=isNonZero);
       And(a=isNonNeg, b=isNonZero, out=isPositive);
       And(a=isPositive, b=instruction[0], out=JGT);
       And(a=isZeroOut, b=instruction[1], out=JEQ);
       And(a=isNegOut, b=instruction[2], out=JLT);

       Or(a=JEQ, b=JLT, out=JLE);
       Or(a=JLE, b=JGT, out=jumpToA);                  // is jump?
       And(a=isCins, b=jumpToA, out=loadPC);   // loadPC? if(isCInstruction && jump)
       Not(in=loadPC, out=PCinc);

}